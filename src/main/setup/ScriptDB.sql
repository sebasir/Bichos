/*** COLLECTION ***/
CREATE TABLE COLLECTION (
	ID_COLLECTION SERIAL NOT NULL PRIMARY KEY CHECK (ID_COLLECTION > 0),
	COLLECTION_NAME VARCHAR(64) NOT NULL,
	COMPANY_NAME VARCHAR(64) NOT NULL
);

/*** CATALOG ***/
CREATE TABLE CATALOG (
	ID_CATALOG SERIAL NOT NULL PRIMARY KEY CHECK (ID_CATALOG > 0),
	CATALOG_NAME VARCHAR(64) NOT NULL,
	ID_COLLECTION INT REFERENCES COLLECTION (ID_COLLECTION),
	UNIQUE(ID_COLLECTION, CATALOG_NAME)
);

/*** SAMPLE TYPE ***/
CREATE TABLE SAMPLE_TYPE (
	ID_SATY SERIAL NOT NULL PRIMARY KEY CHECK(ID_SATY > 0),
	SATY_NAME VARCHAR(32) NOT NULL
);

/*** AUTHOR ***/
CREATE TABLE AUTHOR (
	ID_AUTHOR SERIAL NOT NULL PRIMARY KEY CHECK(ID_AUTHOR > 0),
	AUTHOR_NAME VARCHAR(32) NOT NULL
);

/*** AUTHOR TYPE ***/
CREATE TABLE AUTHOR_TYPE (
	ID_AUTY SERIAL NOT NULL PRIMARY KEY CHECK(ID_AUTY > 0),
	AUTY_NAME VARCHAR(32) NOT NULL
);

/*** REG TYPE ***/
CREATE TABLE REG_TYPE (
	ID_RETY SERIAL NOT NULL PRIMARY KEY CHECK(ID_RETY > 0),
	RETY_NAME VARCHAR(32) NOT NULL
);

/*** AUTHOR ROLE ***/
CREATE TABLE AUTHOR_ROLE (
	ID_AURO SERIAL NOT NULL PRIMARY KEY CHECK(ID_AURO > 0),
	ID_AUTHOR INT REFERENCES AUTHOR (ID_AUTHOR),
	ID_AUTY INT REFERENCES AUTHOR_TYPE (ID_AUTY),
	UNIQUE (ID_AURO, ID_AUTY)
);

CREATE TABLE LOCATION_LEVEL (
	ID_LOCLEVEL SERIAL NOT NULL PRIMARY KEY CHECK(ID_LOCLEVEL > 0),
	LOCLEVEL_NAME VARCHAR(32) NOT NULL,
	LOCLEVEL_RANK INTEGER NOT NULL
);

/*** LOCATION ***/
CREATE TABLE LOCATION (
	ID_LOCATION SERIAL NOT NULL PRIMARY KEY CHECK(ID_LOCATION > 0),
	LOCATION_NAME VARCHAR(64) NOT NULL,
	LATITUDE FLOAT,
	LONGITUDE FLOAT,
	ALTITUDE FLOAT,
	RADIO FLOAT DEFAULT 0,
	ID_LOCLEVEL INT REFERENCES LOCATION_LEVEL (ID_LOCLEVEL),
	ID_CONTAINER INT REFERENCES LOCATION (ID_LOCATION)
);

/*** TAXONOMY_LEVEL ***/
CREATE TABLE TAXONOMY_LEVEL (
	ID_TAXLEVEL SERIAL NOT NULL PRIMARY KEY CHECK(ID_TAXLEVEL > 0),
	TAXLEVEL_NAME VARCHAR(32) NOT NULL,
	TAXLEVEL_RANK INTEGER NOT NULL
);

/*** TAXONOMY ***/
CREATE TABLE TAXONOMY (
	ID_TAXONOMY SERIAL NOT NULL PRIMARY KEY CHECK(ID_TAXONOMY > 0),
	TAXONOMY_NAME VARCHAR(64) NOT NULL,
	ID_TAXLEVEL INT REFERENCES TAXONOMY_LEVEL (ID_TAXLEVEL),
	ID_CONTAINER INT REFERENCES TAXONOMY (ID_TAXONOMY)
);

/*** SPECIMEN ***/
CREATE TABLE SPECIMEN (
	ID_SPECIMEN SERIAL NOT NULL PRIMARY KEY CHECK (ID_SPECIMEN > 0),
	SPECIFIC_EPITHET VARCHAR(64),
	COMMON_NAME VARCHAR(64) NOT NULL,
	ID_TAXONOMY INT REFERENCES TAXONOMY (ID_TAXONOMY),
	ID_COLLECTOR INT REFERENCES AUTHOR_ROLE (ID_AURO),
	IDEN_COMMENT VARCHAR(2048),
	IDEN_DATE TIMESTAMP NOT NULL,
	ID_RETY INT REFERENCES REG_TYPE (ID_RETY),
	ID_SATY INT REFERENCES SAMPLE_TYPE (ID_SATY),
	ID_LOCATION INT REFERENCES LOCATION (ID_LOCATION),
	ID_DETERMINER INT REFERENCES AUTHOR_ROLE (ID_AURO),
	ID_BIOREG VARCHAR(32) NOT NULL,
	ID_CATALOG INT REFERENCES CATALOG (ID_CATALOG),
	COLLECT_DATE TIMESTAMP,
	COLLECT_COMMENT VARCHAR(2048),
	UNIQUE (ID_BIOREG)
);

/*** SPECIMEN_CONTENT ***/
CREATE TABLE SPECIMEN_CONTENT (
	ID_SPECCONT SERIAL NOT NULL PRIMARY KEY CHECK(ID_SPECCONT > 0),
	ID_SPECIMEN INT REFERENCES SPECIMEN (ID_SPECIMEN),
	FILE_NAME VARCHAR(128) NOT NULL,
	DESCRIPTION VARCHAR(512) NOT NULL,
	PUBLISH CHAR(1) NOT NULL DEFAULT 'N',
	FILE_UPLOAD_DATE TIMESTAMP NOT NULL DEFAULT NOW(),
	PUBLISH_DATE TIMESTAMP
);

CREATE TABLE ENV_CONF (
	ID_CONFIG SERIAL NOT NULL PRIMARY KEY CHECK(ID_CONFIG > 0),
	CONFIG_NAME VARCHAR(256) NOT NULL,
	CONFIG_VALUE VARCHAR(256) NOT NULL,
	CONFIG_DESC VARCHAR(512) NOT NULL
);